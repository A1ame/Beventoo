// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class FamilyChatApp {
    constructor() {
        this.currentUser = {
            id: 'user1',
            name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
            username: 'anna_petrova',
            inviteCode: 'AP2024'
        };
        
        this.users = new Map([
            ['mom', { id: 'mom', name: '–ú–∞–º–∞', username: 'mama_lyuba', status: '–í —Å–µ—Ç–∏' }],
            ['dad', { id: 'dad', name: '–ü–∞–ø–∞', username: 'papa_viktor', status: '–í —Å–µ—Ç–∏' }],
            ['sister', { id: 'sister', name: '–ö–∞—Ç—è (—Å–µ—Å—Ç—Ä–∞)', username: 'katya_sis', status: '–ù–µ –≤ —Å–µ—Ç–∏' }]
        ]);
        
        this.currentChatId = null;
        this.currentView = 'contacts'; // 'contacts' –∏–ª–∏ 'chat'
        
        this.init();
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    init() {
        this.initElements();
        this.bindEvents();
        this.showSplashScreen();
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
    initElements() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã
        this.splashScreen = document.getElementById('splashScreen');
        this.app = document.getElementById('app');
        this.contactsScreen = document.getElementById('contactsScreen');
        this.chatScreen = document.getElementById('chatScreen');
        this.chatHeader = document.getElementById('chatHeader');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        this.contactsList = document.getElementById('contactsList');
        this.searchInput = document.getElementById('searchInput');
        this.tabs = document.querySelectorAll('.tab');
        this.addFriendBtn = document.getElementById('addFriendBtn');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞
        this.backBtn = document.getElementById('backBtn');
        this.chatName = document.getElementById('chatName');
        this.chatStatus = document.getElementById('chatStatus');
        this.chatAvatar = document.getElementById('chatAvatar');
        this.callBtn = document.getElementById('callBtn');
        this.videoBtn = document.getElementById('videoBtn');
        this.messagesContainer = document.getElementById('messagesContainer');
        this.messageInput = document.getElementById('messageInput');
        this.sendBtn = document.getElementById('sendBtn');
        this.attachBtn = document.getElementById('attachBtn');
        this.emojiBtn = document.getElementById('emojiBtn');
        
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.addFriendModal = document.getElementById('addFriendModal');
        this.friendUsername = document.getElementById('friendUsername');
        this.friendCode = document.getElementById('friendCode');
        this.closeModalBtn = document.getElementById('closeModalBtn');
        this.cancelBtn = document.getElementById('cancelBtn');
        this.addBtn = document.getElementById('addBtn');
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        this.notification = document.getElementById('notification');
        this.notificationContent = document.getElementById('notificationContent');
    }
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        this.backBtn.addEventListener('click', () => this.showContactsView());
        
        // –ö–æ–Ω—Ç–∞–∫—Ç—ã
        this.contactsList.addEventListener('click', (e) => this.handleContactClick(e));
        this.searchInput.addEventListener('input', (e) => this.handleSearch(e.target.value));
        this.tabs.forEach(tab => {
            tab.addEventListener('click', () => this.handleTabChange(tab));
        });
        
        // –ß–∞—Ç
        this.sendBtn.addEventListener('click', () => this.sendMessage());
        this.messageInput.addEventListener('input', () => this.handleInputResize());
        this.messageInput.addEventListener('keypress', (e) => this.handleKeyPress(e));
        this.callBtn.addEventListener('click', () => this.startCall());
        this.videoBtn.addEventListener('click', () => this.startVideoCall());
        this.attachBtn.addEventListener('click', () => this.attachFile());
        this.emojiBtn.addEventListener('click', () => this.showEmojiPicker());
        
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.addFriendBtn.addEventListener('click', () => this.openAddFriendModal());
        this.closeModalBtn.addEventListener('click', () => this.closeAddFriendModal());
        this.cancelBtn.addEventListener('click', () => this.closeAddFriendModal());
        this.addBtn.addEventListener('click', () => this.addFriend());
        this.addFriendModal.addEventListener('click', (e) => {
            if (e.target === this.addFriendModal) {
                this.closeAddFriendModal();
            }
        });
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ input
        this.preventZoomOnInput();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        window.addEventListener('orientationchange', () => {
            setTimeout(() => this.handleOrientationChange(), 100);
        });
    }
    
    // –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    showSplashScreen() {
        setTimeout(() => {
            this.splashScreen.style.display = 'none';
            this.app.style.display = 'flex';
            this.showContactsView();
        }, 2500);
    }
    
    // –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    showContactsView() {
        this.currentView = 'contacts';
        this.contactsScreen.style.display = 'flex';
        this.chatScreen.style.display = 'none';
        this.chatHeader.style.display = 'none';
        document.body.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
    }
    
    // –ü–æ–∫–∞–∑ —á–∞—Ç–∞
    showChatView(contactId) {
        this.currentChatId = contactId;
        this.currentView = 'chat';
        this.contactsScreen.style.display = 'none';
        this.chatScreen.style.display = 'flex';
        this.chatHeader.style.display = 'flex';
        document.body.style.background = '#f8f9fa';
        
        this.updateChatHeader();
        this.loadMessages();
        this.scrollToBottom();
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
    handleContactClick(e) {
        const contactItem = e.target.closest('.contact-item');
        if (contactItem) {
            const contactId = contactItem.dataset.contact;
            this.showChatView(contactId);
            this.addHapticFeedback();
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞
    updateChatHeader() {
        const user = this.users.get(this.currentChatId);
        if (user) {
            this.chatName.textContent = user.name;
            this.chatStatus.textContent = user.status;
            this.chatAvatar.textContent = user.name.charAt(0).toUpperCase();
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    loadMessages() {
        const messages = this.getMessagesForChat(this.currentChatId);
        this.messagesContainer.innerHTML = '';
        
        messages.forEach(message => {
            this.addMessageToDOM(message);
        });
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ (–¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ)
    getMessagesForChat(chatId) {
        const demoMessages = {
            mom: [
                { id: 1, text: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?', time: '14:25', incoming: true },
                { id: 2, text: '–ü—Ä–∏–≤–µ—Ç, –º–∞–º! –í—Å–µ —Ö–æ—Ä–æ—à–æ, —Ä–∞–±–æ—Ç–∞—é üòä', time: '14:28', incoming: false },
                { id: 3, text: '–≠—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ù–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–¥—ã—Ö–∞—Ç—å', time: '14:30', incoming: true }
            ],
            dad: [
                { id: 1, text: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞?', time: '13:40', incoming: true },
                { id: 2, text: '–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ, –ø–∞–ø–∞!', time: '13:42', incoming: false },
                { id: 3, text: '–£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞', time: '13:45', incoming: true }
            ],
            sister: [
                { id: 1, text: '–ü—Ä–∏–≤–µ—Ç! üòÑ', time: '12:15', incoming: true },
                { id: 2, text: '–ü—Ä–∏–≤–µ—Ç, –ö–∞—Ç—è!', time: '12:18', incoming: false },
                { id: 3, text: '–ö–∞–∫ –¥–µ–ª–∞?', time: '12:20', incoming: false }
            ]
        };
        
        return demoMessages[chatId] || [];
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ DOM
    addMessageToDOM(message) {
        const messageElement = document.createElement('div');
        messageElement.className = `message ${message.incoming ? 'incoming' : 'outgoing'}`;
        messageElement.innerHTML = `
            <div class="message-content">
                <div class="message-text">${message.text}</div>
                <div class="message-time">${message.time}</div>
            </div>
        `;
        this.messagesContainer.appendChild(messageElement);
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    sendMessage() {
        const text = this.messageInput.value.trim();
        if (!text) return;
        
        const currentTime = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
        const message = {
            id: Date.now(),
            text: text,
            time: currentTime,
            incoming: false
        };
        
        this.addMessageToDOM(message);
        this.messageInput.value = '';
        this.handleInputResize();
        this.scrollToBottom();
        this.addHapticFeedback();
        
        // –≠–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        setTimeout(() => this.simulateReply(), 1000 + Math.random() * 2000);
    }
    
    // –≠–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    simulateReply() {
        const replies = [
            '–ü–æ–Ω—è—Ç–Ω–æ! ‚ù§Ô∏è',
            '–•–æ—Ä–æ—à–æ!',
            '–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å üòä',
            '–£–≤–∏–¥–∏–º—Å—è!',
            '–ë–µ—Ä–µ–≥–∏ —Å–µ–±—è!',
            '–õ—é–±–ª—é —Ç–µ–±—è! üíï'
        ];
        
        const randomReply = replies[Math.floor(Math.random() * replies.length)];
        const currentTime = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
        
        const replyMessage = {
            id: Date.now(),
            text: randomReply,
            time: currentTime,
            incoming: true
        };
        
        this.addMessageToDOM(replyMessage);
        this.scrollToBottom();
        this.showNotification('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∏–∑—É —á–∞—Ç–∞
    scrollToBottom() {
        setTimeout(() => {
            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
        }, 100);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
    handleInputResize() {
        this.messageInput.style.height = 'auto';
        const scrollHeight = this.messageInput.scrollHeight;
        const maxHeight = 100;
        this.messageInput.style.height = Math.min(scrollHeight, maxHeight) + 'px';
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (this.messageInput.value.trim()) {
            this.sendBtn.disabled = false;
        } else {
            this.sendBtn.disabled = true;
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
    handleKeyPress(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            this.sendMessage();
        }
    }
    
    // –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    handleSearch(query) {
        const contacts = document.querySelectorAll('.contact-item');
        const searchTerm = query.toLowerCase();
        
        contacts.forEach(contact => {
            const name = contact.querySelector('.contact-name').textContent.toLowerCase();
            const shouldShow = name.includes(searchTerm);
            contact.style.display = shouldShow ? 'flex' : 'none';
        });
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    handleTabChange(activeTab) {
        this.tabs.forEach(tab => tab.classList.remove('active'));
        activeTab.classList.add('active');
        
        const tabType = activeTab.dataset.tab;
        this.filterContacts(tabType);
        this.addHapticFeedback();
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    filterContacts(type) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        console.log('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É:', type);
    }
    
    // –ó–≤–æ–Ω–∫–∏
    startCall() {
        const userName = this.users.get(this.currentChatId)?.name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é';
        this.showNotification(`üìû –ó–≤–æ–Ω–∏–º ${userName}...`);
        this.addHapticFeedback();
    }
    
    startVideoCall() {
        const userName = this.users.get(this.currentChatId)?.name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é';
        this.showNotification(`üìπ –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ —Å ${userName}...`);
        this.addHapticFeedback();
    }
    
    // –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    attachFile() {
        this.showNotification('üìé –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        this.addHapticFeedback();
    }
    
    // –≠–º–æ–¥–∑–∏
    showEmojiPicker() {
        const emojis = ['üòä', '‚ù§Ô∏è', 'üòÑ', 'üëç', 'üéâ', 'üíï', 'üòç', 'üëã'];
        const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
        this.messageInput.value += randomEmoji;
        this.handleInputResize();
        this.addHapticFeedback();
    }
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞
    openAddFriendModal() {
        this.addFriendModal.classList.add('active');
        this.friendUsername.focus();
        this.addHapticFeedback();
    }
    
    closeAddFriendModal() {
        this.addFriendModal.classList.remove('active');
        this.friendUsername.value = '';
        this.friendCode.value = '';
    }
    
    addFriend() {
        const username = this.friendUsername.value.trim();
        const code = this.friendCode.value.trim();
        
        if (!username || !code) {
            this.showNotification('‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return;
        }
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
        this.showNotification(`‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${username}`);
        this.closeAddFriendModal();
        this.addHapticFeedback();
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showNotification(message) {
        this.notificationContent.textContent = message;
        this.notification.classList.add('show');
        
        setTimeout(() => {
            this.notification.classList.remove('show');
        }, 3000);
    }
    
    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    addHapticFeedback() {
        if ('vibrate' in navigator) {
            navigator.vibrate(50);
        }
    }
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ input
    preventZoomOnInput() {
        const inputs = document.querySelectorAll('input, textarea');
        inputs.forEach(input => {
            input.addEventListener('focus', () => {
                // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                const viewport = document.querySelector('meta[name=viewport]');
                const content = viewport.getAttribute('content');
                viewport.setAttribute('content', content + ', maximum-scale=1.0');
                
                setTimeout(() => {
                    viewport.setAttribute('content', content);
                }, 500);
            });
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    handleOrientationChange() {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        document.body.style.height = '100vh';
        
        setTimeout(() => {
            if (this.currentView === 'chat') {
                this.scrollToBottom();
            }
        }, 300);
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker –¥–ª—è PWA
    registerServiceWorker() {
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('./sw.js')
                .then(registration => {
                    console.log('SW registered:', registration);
                })
                .catch(error => {
                    console.log('SW registration failed:', error);
                });
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    requestNotificationPermission() {
        if ('Notification' in window) {
            Notification.requestPermission().then(permission => {
                if (permission === 'granted') {
                    console.log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ');
                }
            });
        }
    }
    
    // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    simulateIncomingMessage() {
        const messages = [
            '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
            '–ß—Ç–æ –¥–µ–ª–∞–µ—à—å?',
            '–£–≤–∏–¥–∏–º—Å—è —Å–∫–æ—Ä–æ! ‚ù§Ô∏è',
            '–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É –∑–∞–≤—Ç—Ä–∞'
        ];
        
        const randomMessage = messages[Math.floor(Math.random() * messages.length)];
        const currentTime = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
        
        if (this.currentView === 'chat') {
            const message = {
                id: Date.now(),
                text: randomMessage,
                time: currentTime,
                incoming: true
            };
            this.addMessageToDOM(message);
            this.scrollToBottom();
        }
        
        this.showNotification('üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        this.addHapticFeedback();
        
        // –ü–æ–∫–∞–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (Notification.permission === 'granted') {
            new Notification('FamilyChat', {
                body: randomMessage,
                icon: './icon-192.png',
                badge: './icon-192.png'
            });
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    const app = new FamilyChatApp();
    
    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    app.requestNotificationPermission();
    app.registerServiceWorker();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ)
    setInterval(() => {
        if (Math.random() < 0.3) { // 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            app.simulateIncomingMessage();
        }
    }, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    console.log('FamilyChat –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.addEventListener('beforeunload', () => {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è...');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ');
    } else {
        console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ');
    }
});

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
class DateUtils {
    static formatTime(date) {
        return new Intl.DateTimeFormat('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        }).format(date);
    }
    
    static formatDate(date) {
        const today = new Date();
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        
        if (date.toDateString() === today.toDateString()) {
            return '–°–µ–≥–æ–¥–Ω—è';
        } else if (date.toDateString() === yesterday.toDateString()) {
            return '–í—á–µ—Ä–∞';
        } else {
            return new Intl.DateTimeFormat('ru-RU', {
                day: 'numeric',
                month: 'short'
            }).format(date);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { FamilyChatApp, DateUtils };
}